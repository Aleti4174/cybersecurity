import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Scanner;

public class FileEncryptionSystem {
    
    // Method to generate an AES key
    public static SecretKey generateKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256, new SecureRandom()); // Use 256-bit AES
        return keyGen.generateKey();
    }

    // Method to encrypt a file
    public static void encryptFile(File inputFile, File outputFile, SecretKey secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileOutputStream fos = new FileOutputStream(outputFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                byte[] output = cipher.update(buffer, 0, bytesRead);
                if (output != null) fos.write(output);
            }
            byte[] outputBytes = cipher.doFinal();
            if (outputBytes != null) fos.write(outputBytes);
        }

        System.out.println("File encrypted successfully!");
    }

    // Method to decrypt a file
    public static void decryptFile(File inputFile, File outputFile, SecretKey secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, secretKey);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileOutputStream fos = new FileOutputStream(outputFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                byte[] output = cipher.update(buffer, 0, bytesRead);
                if (output != null) fos.write(output);
            }
            byte[] outputBytes = cipher.doFinal();
            if (outputBytes != null) fos.write(outputBytes);
        }

        System.out.println("File decrypted successfully!");
    }

    // Convert SecretKey to String for storage
    public static String encodeKey(SecretKey key) {
        return Base64.getEncoder().encodeToString(key.getEncoded());
    }

    // Convert String back to SecretKey
    public static SecretKey decodeKey(String encodedKey) {
        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);
        return new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.println("Welcome to File Encryption and Decryption System");
            System.out.println("1. Generate AES Key");
            System.out.println("2. Encrypt File");
            System.out.println("3. Decrypt File");
            System.out.println("4. Exit");

            SecretKey secretKey = null;

            while (true) {
                System.out.print("\nChoose an option: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        secretKey = generateKey();
                        System.out.println("Generated AES Key: " + encodeKey(secretKey));
                        break;

                    case 2:
                        if (secretKey == null) {
                            System.out.println("Please generate or provide a key first.");
                            break;
                        }
                        System.out.print("Enter path to input file: ");
                        String inputPath = scanner.nextLine();
                        System.out.print("Enter path to output (encrypted) file: ");
                        String encryptedPath = scanner.nextLine();
                        encryptFile(new File(inputPath), new File(encryptedPath), secretKey);
                        break;

                    case 3:
                        if (secretKey == null) {
                            System.out.println("Please generate or provide a key first.");
                            break;
                        }
                        System.out.print("Enter path to encrypted file: ");
                        String encryptedFilePath = scanner.nextLine();
                        System.out.print("Enter path to output (decrypted) file: ");
                        String decryptedPath = scanner.nextLine();
                        decryptFile(new File(encryptedFilePath), new File(decryptedPath), secretKey);
                        break;

                    case 4:
                        System.out.println("Exiting the system. Stay secure!");
                        scanner.close();
                        return;

                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            }
        } catch (Exception e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }
}
